
1、拷贝构造
	class cls
	{
	public:
		cls(const cls &) { }			// 第一个参数是自身引用，其余参数均匀默认值，则为拷贝构造
	};

	合成拷贝构造会拷贝非 static 成员（包括数组）

2、赋值拷贝运算符 -- 非初始化 = 时用该成员函数
	class cls
	{
	public:
		cls & operator=(const cls &) { }
	};

	合成拷贝构造会拷贝非 static 成员（包括数组）

3、阻止拷贝
	1. 删除函数： 只能出现在第一次声明时（=default 只出现在定义处） */
		class cls
		{
		public:
			cls(const cls &) = delete;				// 阻止拷贝
			cls & operator=(const cls &) = delete;	// 阻止赋值
		};

		注： 1. 类中 const 成员或引用成员没初始值，合成默认构造是删除的
			 2. 类有 const 或引用成员，类的“默认”赋值函数是删除的
			 3. 类有移动成员函数，类的合成拷贝成员函数是删除的
			 4. 类有拷贝控制成员函数，编译器不提供合成移动成员函数
			 5. 类中有不可拷贝/移动的非 static 数据成员，拷贝/移动成员函数都是删除的


	2. private 拷贝
		class cls
		{
			cls(const cls &);						// 友元和成员函数可以访问 private 
			cls & operator=(const cls &);			// 所以只声明不定义，可以防友元和成员函数
		};


4、右值引用 && -- 只能绑定右值，接管即将销毁的对象
	
	move(var)							// #std <utility>#  将左值变为右值

5、移动构造 -- 接管右值引用对象的资源，只需保证其离开函数后仍可销毁，可重新赋值
	class cls
	{
	public:
		cls(cls &&) noexcept { }			// 第一个参数是自身右值引用，其余参数均匀默认值，则为移动构造；移动构造不应抛出异常
														noexcept ：承诺不抛出异常；声明和定义处都要有
	};

	若存在拷贝构造，将用拷贝构造代替（即使移动没被显式删除或者不可访问前提下）

6、移动赋值运算符  -- 接管右值引用对象的资源，并只需保证其离开函数后仍可销毁，可重新赋值
	class cls
	{1
	public:
		cls & operator=(cls && tmp) noexcept 
		{
			if (*this != tmp)
			{
				...
			}
			return *this;
		}
	};

	若存在拷贝赋值运算符，将用拷贝赋值运算符代替（即使移动没被显式删除或者不可访问前提下）

7、移动迭代器
	make_move_iterator(it)					// #std <iterator># 返回移动迭代器，该迭代器解引用返回右值

8、引用限定符
	class cls
	{
		/* & 和 && 可重载，但不能与无引用限定符的函数重载 */
		void func() & { }					// & 在声明和定义中都要出现，且如果有 const 则在 const 后；该函数只有左值能调用
		void func() && { }					// 该函数只有右值能调用
	}

注： 1. 一般需要析构就需要拷贝构造和赋值拷贝运算符
	 2. 编写拷贝构造和赋值拷贝运算符时要先用局部变量得到右侧，在销毁左侧，从而实现安全
	 3. 可通过拷贝并交换实现安全赋值运算符
		cls & operator=(cls tmp)					// 参数不是引用；若实参是左值，将调用拷贝构造，若右值，将调用移动构造
		{
			swap(*this, tmp);						// 将调用析构处理变量，不用自己写 delete
			return *this;
		}