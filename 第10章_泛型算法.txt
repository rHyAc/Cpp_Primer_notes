
1、只读算法（通常使用 cb 和 ce ，但要返回可修改的迭代器则用 b 和 e）
	find(b, e, val)					// 返回指向找到的第一个 val 的迭代器，找不到则返回尾后元素，要求容器支持 == 操作
	find_if(b, e, pred)				// 返回第一个一元谓词返回非 0 元素
	search							// 在序列中找序列
	count(b, e, val)				// 返回 val 出现次数
	accumulate(b, e, init_val)		// #std <numeric># 返回和，init_val 为求和第一个决定了运算类型
	equal(b1, e1, b2)				// 若两个迭代器元素相同返回 true ，要求两个容器元素可以使用 == 且第二个容器在比较中不能越界
	equal_range(b, e, val, cmp)		// 要求所有序列按照少于、等于、大于顺序排列， cmp 代替 < ，返回等于 val 的范围，类型为 pair<It, It>

2、写容器元素算法（不改变容器大小）
	fill(b, e, val)							// 写入 val
	copy(b1, e1, b2)						// 从 c1 复制 c2 ， 返回 e2
	replace(b, e, val1, val2)				// 将 val1 改为 val2
	replace_copy(b1, e1, b2, val1, val2)	// 将结果放到 c2 中（元素赋值）
	transform(b1, e1, b2, pred)				// 将元素替换为一元 pred 返回值， b2 可以等于 b1

3、重排容器元素算法
	sort(b, e)						// 要求随机访问
	sort(b, e, cmp)					// 二元谓词 cmp 代替 <
	stable_sort(b, e)
	unique(b, e)					// 相邻重复元素放到容器后部，返回前部尾后指针
	unique(b, e, pred)				// 二元谓词 pred 代替 ==
	reverse(b, e)
	reverse(b1, e1, b2)				// 反转结果赋值写到 c2
	remove(b, e, val)				// 删除值为 val 元素，元素相对位置不变，容器大小不变
	remove_if(b, e, pred)			// 一元谓词 pred 代替 == 

4、可修改元素算法
	for_each(b, e, func)			// 调用 func(*iter)
	
5、lambda
	[capture list] (para list) -> return type { function body }

		cature list ：function body 内要用到的外部局部变量，这些变量在 lambda 创建时捕获
							值捕获：要求变量可拷贝，在函数体内改变值捕获变量是非法的
							引用捕获（变量名前加 &）：要求在 lambda 执行时变量仍存在
						隐式捕获：
							[=]	：值捕获全部局部变量
							[&]
							[=, &c] ：混合捕获，必须 =/& 开头

		para list ：若忽略等价于空参数
		return type ：若忽略 para list ，则可忽略；若忽略将从 return 推倒

		注：返回捕获引用的 lambda 时，要小心


	可变lambda ： [capture list] (para list) mutable -> return type { function body }
		函数体内可改变值捕获变量（但不会改变外部的局部变量），以及调用其非 const 成员函数

6、参数绑定 -- 可用于将多元谓词封装为一样谓词
	bind #std <functional># -- adaptor
		auto newcallable = bind(callable, arg_list)
			arg_list 为 callable 参数列表
				1. 可有 _n #std::placeholders <functional># 表示 newcallable 接受的第 n 个参数
				2. 对于非 _n 形参，使用 ref(var) 或 cref(var) #std <functional># 才能实现传递引用或 const 引用

7、迭代器 #std <iterator>#
	1. 插入迭代器（* 、 ++ 操作均返回原迭代器）
		back_inserter(c)		// 返回尾入迭代器，
										该迭代器绑定到容器 c ， 使用该迭代器对元素进行 = 操作均会变为 push_back() （要求支持 push_back()）
		front_inserter(c)		// （要求支持 push_back()）
		inserter(c, iter)		// iter 为指向容器 c 迭代器（要求支持 insert()）

	2. iostream 迭代器 
		istream_iterator -- 指向输入流（istream 、 ifstream 、 istringstream）的指针（要求流支持 >>）
			istream_iterator<T> T_it(is);
			istream_iterator<T> T_eof;			// 尾后迭代器
			* T_it								// 读取

		ostream_iterator（要求流支持<<）（* 、 ++ 操作均返回原迭代器）
			ostream_iterator<T> out(os)
			ostream_iterator<T> out(os, cp)		// 每次输出后追加 cp 所指的字符串内容
			out = val							// 输出

	3、反向迭代器（要求支持 -- 操作）

	4、类型
		输入迭代器								// 只读，单遍扫描，只递增
			至少支持 
				== 、 !=
				++
				* （解引用）
				-> 、(*it.)member
		输出迭代器								// 只写，单遍扫描，只递增
			至少支持 
				++
				* （解引用）
		前向迭代器								// 读写，多遍扫描，只递增
			至少支持输入、输出迭代器所以操作
		双向迭代器								// 读写，多遍扫描，可增减
			至少支持前向迭代器所以操作
		随机访问迭代器							// 读写，多遍扫描，支持全部迭代器运算
			至少支持
				< 、 <= 、 > 、 >=
				+ n 、 - n 、 += n 、 -= n
				iter1 - iter2
				iter[n] 
		连续迭代器								// 要求空间连续，其余和随机一样

注：一般 std 算法是对迭代器进行操作，所以不能改变容器大小

